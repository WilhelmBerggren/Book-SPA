{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/models/BookModel.ts","webpack:///./src/models/FormModel.ts","webpack:///./src/models/LogBoxModel.ts","webpack:///./src/models/KeyModel.ts","webpack:///./src/services/ResourceManager.ts","webpack:///./src/views/BookView.ts","webpack:///./src/views/FormView.ts","webpack:///./src/views/LogBoxView.ts","webpack:///./src/views/KeyView.ts","webpack:///./src/controllers/BookController.ts","webpack:///./src/controllers/FormController.ts","webpack:///./src/controllers/LogBoxController.ts","webpack:///./src/controllers/KeyController.ts","webpack:///./src/index.ts","webpack:///./src/models/MainModel.ts","webpack:///./src/controllers/MainController.ts","webpack:///./src/views/MainView.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BookModel","resourceManager","this","books","getBooks","then","FormModel","op","id","title","author","params","submitForm","LogBoxModel","attempts","attempt","push","KeyModel","getKey","res","ResourceManager","listeners","forEach","listener","console","log","update","persistentFetch","data","requestKey","url","URL","searchParams","append","fetch","toString","json","status","notify","Response","window","localStorage","getItem","refreshKey","k","setItem","BookView","model","filter","filterBooks","map","book","updated","join","some","val","includes","FormView","LogBoxView","getAttempts","KeyView","BookController","view","document","addEventListener","event","input","target","display","FormController","preventDefault","select","elem","querySelector","LogBoxController","KeyController","keyModel","formModel","bookModel","logBoxModel","addListener","bookController","bookView","formController","formView","logBoxController","logBoxView","keyController","keyView","refreshAndUpdate","innerHTML"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import ResourceManager from '../services/ResourceManager';\r\n\r\nexport default class BookModel {\r\n    resourceManager: ResourceManager;\r\n    books: Book[];\r\n    constructor(resourceManager: ResourceManager) {\r\n        this.resourceManager = resourceManager;\r\n        this.books = [];\r\n        this.getBooks();\r\n    }\r\n\r\n    async getBooks() {\r\n        return await this.resourceManager.getBooks().then((books : Book[]) => {\r\n            this.books = books;\r\n\r\n            return books;\r\n        });\r\n    }\r\n}\r\n\r\nexport interface Book {\r\n    id: string,\r\n    author: string,\r\n    title: string,\r\n    updated: string\r\n}","import ResourceManager, { Params } from '../services/ResourceManager';\r\n\r\nexport default class FormModel {\r\n    resourceManager: ResourceManager;\r\n    op: string;\r\n    id: string;\r\n    title: string;\r\n    author: string;\r\n    constructor(resourceManager: ResourceManager) {\r\n        this.op = 'insert';\r\n        this.id = '';\r\n        this.title = '';\r\n        this.author = '';\r\n\r\n        this.resourceManager = resourceManager;\r\n    }\r\n    \r\n    async submitForm(params: Params) {\r\n        let res = await this.resourceManager.submitForm(params);\r\n        return res;\r\n    }\r\n}","import ResourceManager from '../services/ResourceManager';\r\n\r\nexport default class LogBoxModel {\r\n    resourceManager: ResourceManager;\r\n    attempts: string[];\r\n    constructor(resourceManager: ResourceManager) {\r\n        this.resourceManager = resourceManager;\r\n        this.attempts = [];\r\n    }\r\n\r\n    addAttempt(attempt: string) {\r\n        if(attempt)\r\n            this.attempts.push(attempt);\r\n        else\r\n            this.attempts.push('Error: undefined attempt');\r\n    }\r\n\r\n    getAttempts() {\r\n        return this.resourceManager.attempts;\r\n    }\r\n}","import ResourceManager from '../services/ResourceManager';\r\n\r\nexport default class KeyModel {\r\n    resourceManager: ResourceManager;\r\n    key: string;\r\n    constructor(resourceManager: ResourceManager) {\r\n        this.key = '';\r\n        this.resourceManager = resourceManager;\r\n    }\r\n\r\n    async getKey() {\r\n        return await this.resourceManager.getKey().then((res) => {\r\n            this.key = res;\r\n            return res;\r\n        });\r\n    }\r\n}","import { Book } from \"../models/BookModel\";\r\n\r\nexport default class ResourceManager {\r\n    listeners: any[];\r\n    attempts: any[];\r\n    key: string;\r\n    constructor() {\r\n        this.listeners = <Listener[]>[];\r\n        this.attempts = [];\r\n        this.key = '';\r\n        this.getKey();\r\n    }\r\n\r\n    async notify() {\r\n        this.listeners.forEach((listener) => {\r\n            console.log(\"Alerting listener: \", listener);\r\n            listener.update();\r\n        });\r\n    }\r\n\r\n    async addListener(listener: Listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n\r\n    async getBooks(): Promise<Book[]> {\r\n        return await this.persistentFetch(\r\n            'getBooks', {\r\n                op: 'select',\r\n                key: await this.getKey(), \r\n            }).then((res) => res.data);\r\n    }\r\n\r\n    async persistentFetch(name: string, params: Params, requestKey = false): Promise<any> {\r\n        let url = new URL('https://www.forverkliga.se/JavaScript/api/crud.php');\r\n        if(requestKey == true) {\r\n            url.searchParams.append('requestKey', 'true');\r\n        }\r\n        else {\r\n            if(params.op)\r\n                url.searchParams.append('op', params.op);\r\n            if(params.id)\r\n                url.searchParams.append('id', params.id);\r\n            if(params.title)\r\n                url.searchParams.append('title', params.title);\r\n            if(params.author)\r\n                url.searchParams.append('author', params.author);\r\n            if(params.key)\r\n                url.searchParams.append('key', params.key);\r\n        }\r\n        let n = 0;\r\n        while(n < 10) {\r\n            n++;\r\n            let res = await fetch(url.toString()).then(res => res.json());\r\n            if (res.status == \"success\") {\r\n                this.attempts.push(`${name}: Fetched in ${(10 - n)} tries`);\r\n                this.notify();\r\n                return res;\r\n            }\r\n        }\r\n        this.attempts.push(`${name}: Failed to fetch`);\r\n        this.notify();\r\n        let res = new Response();\r\n        return res;\r\n    }\r\n\r\n    async getKey(): Promise<string> {\r\n        if(window.localStorage.getItem('key') == null) {\r\n            this.key = await this.refreshKey();\r\n            return this.key;\r\n        }\r\n        return window.localStorage.getItem('key');\r\n    }\r\n\r\n    async refreshKey() : Promise<string> {\r\n        return await this.persistentFetch('getKey', null, true).then((k) => {\r\n            window.localStorage.setItem('key', k);\r\n            this.notify();\r\n            return k.key;\r\n        });\r\n    }\r\n\r\n    async submitForm(params: Params) {\r\n        params.key = await this.getKey();\r\n        return await this.persistentFetch('submitForm', params);\r\n    }\r\n}\r\n\r\nexport interface Params {\r\n    op?: string;\r\n    id?: string;\r\n    title?: string;\r\n    author?: string;\r\n    key?: string;\r\n}\r\n\r\ninterface Listener {\r\n    update: () => void;\r\n}","import BookModel, { Book } from '../models/BookModel';\r\n\r\nexport default class BookView {\r\n    model: BookModel;\r\n    filter: string;\r\n    constructor(model: BookModel) {\r\n        this.model = model;\r\n        this.filter = '';\r\n    }\r\n\r\n    async display() {\r\n        console.log(\"BookView Updating to: \", this.model.books);\r\n        return /*html*/`\r\n        <div class=\"cards\">\r\n            <div class=\"card\">\r\n                <h1> Books </h1>\r\n                <input type=\"text\" id=\"filter\" placeholder=\"filter\" value=\"${this.filter}\"\">\r\n                <button id=\"refresh-books\">Refresh</button>\r\n                <div class=\"cards\">\r\n                    ${this.filterBooks(this.filter).map((book) => /*html*/`     \r\n                        <div class='card'>\r\n                            <p>Title: ${book.title}</p>\r\n                            <p>Author: ${book.author}</p>\r\n                            <p>ID: ${book.id}</p>\r\n                            <p>Updated: ${book.updated}</p>\r\n                        </div>\r\n                        `).join('')}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        `\r\n    }\r\n    \r\n    filterBooks(filter: string): Book[] {\r\n        console.log(\"BookView Filtering: \", filter);\r\n        let books = <Book[]>[];\r\n        if(this.model.books) {\r\n            this.model.books.forEach((book: Book) => {\r\n                if([book.id, book.title, book.author, book.updated].some((val: string) => (''+val).includes(filter))) {\r\n                    books.push(book);\r\n                }\r\n            })\r\n        }\r\n        return books;\r\n    }\r\n}","import FormModel from '../models/FormModel';\r\n\r\nexport default class FormView {\r\n    model: FormModel;\r\n    constructor(model: FormModel) {\r\n        this.model = model;\r\n    }\r\n\r\n    async display() {\r\n        return /*html*/`\r\n            <h1> Form </h1>\r\n            <form id=\"bookForm\" class=\"card\">\r\n            <div class=\"row\">\r\n                <h3> Action </h3>\r\n                <select name=\"op\" id=\"op\">\r\n                    <option value=\"insert\" ${this.model.op ==\"insert\" ? 'selected' : ''}>Insert</option>\r\n                    <option value=\"update\" ${this.model.op ==\"update\" ? 'selected' : ''}>Update</option>\r\n                    <option value=\"delete\" ${this.model.op ==\"delete\" ? 'selected' : ''}>Delete</option>\r\n                </select>\r\n            </div>\r\n            ${(this.model.op == \"update\") || (this.model.op == \"delete\") ? /*html*/`\r\n                <div class=\"row\" id=\"id-row\">\r\n                    <h3> ID </h3>\r\n                    <input id=\"id\" type=\"text\" name=\"id\" placeholder=\"id\" value=\"${this.model.id}\">\r\n                </div>\r\n            ` : ''}\r\n            ${(this.model.op == \"insert\") || (this.model.op == \"update\") ? /*html*/`\r\n                <div class=\"row\" id=\"author-row\">\r\n                    <h3> Author </h3>\r\n                    <input id=\"author\" type=\"text\" name=\"author\" placeholder=\"author\" value=\"${this.model.author}\">\r\n                </div>\r\n                <div class=\"row\" id=\"title-row\">\r\n                    <h3> Title </h3>\r\n                    <input id=\"title\" type=\"text\" name=\"title\" placeholder=\"title\" value=\"${this.model.title}\">\r\n                </div>\r\n            ` : ''}\r\n            <div class=\"row\">\r\n                <h3> Submit </h3>\r\n                <input type=\"submit\">\r\n            </div>\r\n        </form>\r\n        `\r\n    }\r\n}","import LogBoxModel from '../models/LogBoxModel';\r\n\r\nexport default class LogBoxView {\r\n    model: LogBoxModel;\r\n    constructor(model: LogBoxModel) {\r\n        this.model = model;\r\n    }\r\n\r\n    async display() {\r\n        return /*html*/`\r\n            <h1> Submission Attempts </h1>\r\n            <p id=\"attempts\"></p>\r\n            ${this.model.getAttempts().map((attempt) => /*html*/`\r\n                <p>${attempt}</p>\r\n            `).join('')}\r\n        `\r\n    }\r\n}","import KeyModel from '../models/KeyModel';\r\n\r\nexport default class KeyView {\r\n    model: KeyModel;\r\n    constructor(model: KeyModel) {\r\n        this.model = model;\r\n    }\r\n\r\n    async display() {\r\n        return /*html*/`\r\n            <h1> Key </h1>\r\n            <button id=\"refresh-key\">Refresh</button>\r\n            <p> ${await this.model.getKey()} </p>\r\n        `\r\n    }\r\n}","import BookModel from '../models/BookModel';\r\nimport BookView from '../views/BookView';\r\n\r\nexport default class BookController {\r\n    model: BookModel;\r\n    view: BookView;\r\n    constructor(model: BookModel, view: BookView) {\r\n        this.model = model;\r\n        this.view = view;\r\n        \r\n        document.addEventListener('input', (event) => {\r\n            let input = event.target as HTMLInputElement;\r\n            if(input.id == 'filter') {\r\n                this.view.filter = input.value;\r\n                this.model.resourceManager.notify();\r\n            }\r\n        });\r\n    }\r\n    \r\n    async update() {\r\n        return await this.view.display();\r\n    }\r\n\r\n    async refreshAndUpdate() {\r\n        return await this.model.getBooks().then((res) => this.update());\r\n    }\r\n}","import FormModel from '../models/FormModel';\r\nimport FormView from '../views/FormView';\r\n\r\nexport default class FormController {\r\n    model: FormModel;\r\n    view: FormView;\r\n    constructor(model: FormModel, view: FormView) {\r\n        this.model = model;\r\n        this.view = view;\r\n        \r\n        document.addEventListener('change', (event) => {\r\n            let input = event.target as HTMLInputElement;\r\n            if(input.id == 'op') {\r\n                this.model.op = input.value;\r\n                this.model.resourceManager.notify();\r\n            }\r\n        });\r\n        \r\n        document.addEventListener('submit', async (event) => {\r\n            event.preventDefault();\r\n            let select = (id: string): string => {\r\n                let elem = document.querySelector(id) as HTMLInputElement;\r\n                return (elem && elem.value) ? elem.value : '';\r\n            }\r\n            let params = {\r\n                id: select('#id'),\r\n                op: select('#op'),\r\n                title: select('#title'), \r\n                author: select('#author'), \r\n            }\r\n            await this.model.submitForm(params).then(() => {\r\n                this.model.resourceManager.notify();\r\n            });\r\n        });\r\n    }\r\n    \r\n    update() {\r\n        this.view.display();\r\n    }\r\n}","import LogBoxModel from '../models/LogBoxModel';\r\nimport LogBoxView from '../views/LogBoxView';\r\n\r\nexport default class LogBoxController {\r\n    model: LogBoxModel;\r\n    view: LogBoxView;\r\n    constructor(model: LogBoxModel, view: LogBoxView) {\r\n        this.model = model;\r\n        this.view = view;\r\n    }\r\n    \r\n    update() {\r\n        this.view.display();\r\n    }\r\n}","import KeyModel from '../models/KeyModel';\r\nimport KeyView from '../views/KeyView';\r\n\r\nexport default class KeyController {\r\n    model: KeyModel;\r\n    view: KeyView;\r\n    constructor(model: KeyModel, view: KeyView) {\r\n        this.model = model;\r\n        this.view = view;\r\n    }\r\n    \r\n    update() {\r\n        this.view.display();\r\n    }\r\n}","import MainModel from './models/MainModel';\r\nimport MainView from './views/MainView';\r\nimport MainController from './controllers/MainController';\r\n\r\nlet model = new MainModel();\r\nlet view = new MainView(model);\r\nlet controller = new MainController(model, view);","import BookModel from './BookModel';\r\nimport FormModel from './FormModel';\r\nimport LogBoxModel from './LogBoxModel';\r\nimport KeyModel from './KeyModel';\r\nimport ResourceManager from '../services/ResourceManager';\r\n\r\nexport default class MainModel {\r\n    resourceManager: ResourceManager;\r\n    keyModel: KeyModel;\r\n    formModel: FormModel;\r\n    bookModel: BookModel;\r\n    logBoxModel: LogBoxModel;\r\n    constructor() {\r\n        this.resourceManager = new ResourceManager();\r\n\r\n        this.keyModel = new KeyModel(this.resourceManager);\r\n        this.formModel = new FormModel(this.resourceManager);\r\n        this.bookModel = new BookModel(this.resourceManager);\r\n        this.logBoxModel = new LogBoxModel(this.resourceManager);\r\n    }\r\n}","import BookController from './BookController';\r\nimport FormController from './FormController';\r\nimport LogBoxController from './LogBoxController';\r\nimport KeyController from './KeyController';\r\nimport MainModel from '../models/MainModel';\r\nimport MainView from '../views/MainView';\r\n\r\nexport default class MainController {\r\n    model: MainModel;\r\n    view: MainView;\r\n    bookController: BookController;\r\n    formController: FormController;\r\n    logBoxController: LogBoxController;\r\n    keyController: KeyController;\r\n    constructor(model: MainModel, view: MainView) {\r\n        this.model = model;\r\n        this.view = view;\r\n        \r\n        this.model.resourceManager.addListener(this);\r\n        \r\n        this.bookController = new BookController(model.bookModel, this.view.bookView);\r\n        this.formController = new FormController(model.formModel, this.view.formView);\r\n        this.logBoxController = new LogBoxController(model.logBoxModel, this.view.logBoxView);\r\n        this.keyController = new KeyController(model.keyModel, this.view.keyView);\r\n        \r\n        document.addEventListener('click', async (event) => {\r\n            let input = event.target as HTMLInputElement;\r\n\r\n            if(input.id == '#refresh-key') {\r\n                await this.model.resourceManager.refreshKey();\r\n            }\r\n            if(input.id == 'refresh-books') {\r\n                await this.bookController.refreshAndUpdate();\r\n            }\r\n        });\r\n    }\r\n    \r\n    async update() {\r\n        document.querySelector('#main').innerHTML = await this.view.display();\r\n    }\r\n}","import BookView from './BookView';\r\nimport FormView from './FormView';\r\nimport LogBoxView from './LogBoxView';\r\nimport KeyView from './KeyView';\r\nimport MainModel from '../models/MainModel';\r\n\r\nexport default class MainView {\r\n    model: MainModel;\r\n    bookView: BookView;\r\n    formView: FormView;\r\n    logBoxView: LogBoxView;\r\n    keyView: KeyView;\r\n    constructor(model: MainModel) {\r\n        this.model = model;\r\n        this.bookView = new BookView(model.bookModel);\r\n        this.formView = new FormView(model.formModel);\r\n        this.logBoxView = new LogBoxView(model.logBoxModel);\r\n        this.keyView = new KeyView(model.keyModel);\r\n    }\r\n\r\n    async display() {\r\n        return /*html*/`\r\n            <section class=\"card\">\r\n                <div id=\"book-form-container\">\r\n                    ${await this.formView.display()}\r\n                </div>\r\n            </section>\r\n            <section class=\"cards\">\r\n                <div class=\"card\" id=\"log-box\">\r\n                    ${await this.logBoxView.display()}\r\n                </div>\r\n                <div class=\"card\" id=\"key\">\r\n                    ${await this.keyView.display()}\r\n                </div>\r\n            </section>\r\n            <section id=\"books\" class=\"cards\">\r\n                ${await this.bookView.display()}\r\n            </section>\r\n        `\r\n    }\r\n}"],"sourceRoot":""}